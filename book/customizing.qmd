# Using py-rocket-base

py-rocket-base is designed to be used in the FROM line of a Dockerfile similar to rocker images. It includes directories called `\pyrocket_scripts` and `\rocker_scripts` that will help you do common tasks for scientific docker images. You do not have to use these scripts. If you are familiar with writing Docker files, you can write your own code. The exception is installation of Desktop files. Properly adding Desktop applications to py-rocket-base requires the use of the `\pyrocket_scripts/install-desktop.sh` script. The start file is also an exception. See the discussion in the configuration files.

**Calling the scripts**

The format for calling the pyrocket and rocker scripts is the following. 

pyrocket scripts take files (or a path to a directory with Desktop files) as arguments. The `COPY` command is needed to copy the file into the Docker build context where it can be used in `RUN` commands. Without this you will get a "file not found" error. Removing the file after you are done with it will clean up your image files.
```
COPY environment.yml environment.yml
RUN /pyrocket_scripts/install-conda-packages.sh environment.yml
RUN rm environment.yml
```

Rocker scripts do not take arguments. Note that PATH must be given since rocker installation scripts will fail with conda on the path. The path specification is only within the specific RUN context.
```
USER root
RUN PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin && \
    /rocker_scripts/install_geospatial.sh
USER ${NB_USER}
```

## File structure

Here is a typical repo structure. Only the Dockerfile is required. The rest are optional. The files names, `apt.txt`, `environment.yml`, `requirements.txt` and `install.R` are optional. You can name these files other names and still use them in the pyrocket scripts. `Desktop`, `start` and `postBuild` must be named exactly this to use them in the pyrocket scripts (these scripts do not take filename arguments).

```
your-repo/
├── Dockerfile
├── apt.txt
├── environment.yml
├── install.R
├── requirements.txt
├── postBuild
├── start
├── Desktop/
│   ├── qgis.desktop
│   ├── qgis.xml
│   └── qgis.png
```

Read [configuration_files](configuration_files.html) to learn about apt.txt, environment.yml, install.R, requirements.txt, postBuild, and start. Read [Desktop](desktop.html) to learn about the Desktop folder and files for applications.

## Examples

### Add some Python packages

You want to add some Python packages to the conda notebook environment.

```
your-repo/
├── Dockerfile
├── environment.yml
```

Dockerfile
```
FROM ghcr.io/nmfs-opensci/py-rocket-base:latest

COPY environment.yml environment.yml
RUN /pyrocket_scripts/install-conda-packages.sh environment.yml
RUN rm environment.yml
```

environment.yml
```
name: optional
channels:
  - conda-forge
dependencies:
  - cmocean
  - numpy
```

### Add R packages

Add an R script to install packages. **Important**: packages that have linux dependencies (e.g. all the spatial packages depend on GDAL) will not work if you use `install.packages()`. GDAL will not be installed.

```
your-repo/
├── Dockerfile
├── install.R
```

Dockerfile
```
FROM ghcr.io/nmfs-opensci/py-rocket-base:latest

COPY install.R install.R
RUN /pyrocket_scripts/install-r-packages.sh install.R
RUN rm install.R
```

install.R
```
# to match rocker/verse:4.4 used in py-rocker-base
# look up the date that the Rocker image was created and put that
repo <- "https://p3m.dev/cran/__linux__/jammy/2024-05-13"
list.of.packages <- c("ncdf4", "httr", "plyr", "lubridate")
install.packages(list.of.packages, repos=repo)
```

### Add some linux packages

You want to add some linux packages with apt-get. `apt-get` requires root so you will need to switch to root and switch back to `${NB_USER}`.

```
your-repo/
├── Dockerfile
├── apt.txt
```

Dockerfile
```
FROM ghcr.io/nmfs-opensci/py-rocket-base:latest

USER root
COPY apt.txt apt.txt
RUN /pyrocket_scripts/install-apt-packages.sh apt.txt
RUN rm apt.txt
USER ${NB_USER}
```

apt.txt
```
# a package
libgl1-mesa-glx

# Another
vim
```

### Add R geospatial packages

Geospatial packages require some linux packages. To get this working in your Docker image add this to your Docker file:

Dockerfile
```
FROM ghcr.io/nmfs-opensci/py-rocket-base:latest

USER root
RUN PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin && \
    /rocker_scripts/install_geospatial.sh
USER ${NB_USER}
```

You have access to all the rocker_scripts and you can run these similar to the line above.




