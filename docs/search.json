[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "py-rocket-base",
    "section": "",
    "text": "Introduction\nimage url:ghcr.io/nmfs-opensci/py-rocket-base:latest\nThe base image has the following support:",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#using-the-image",
    "href": "index.html#using-the-image",
    "title": "py-rocket-base",
    "section": "Using the image",
    "text": "Using the image\nInclude a Dockerfile in your repository with the following from line:\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\nTo extend the base image, see the documentation on customizing the base image. py-rocket-base includes directories called \\pyrocket_scripts and \\rocker_scripts that will help you do common tasks for extending scientific docker images. You do not have to use these scripts, but they can help you do standard installation tasks.\nThere is one exception and that is the installation of Desktop files. Properly adding Desktop applications to py-rocket-base requires the use of the \\pyrocket_scripts/install-desktop.sh script. Setting up the start file (a script that runs after the user server is started) is also unique. See the documentation.\nThis work is part of a large effort: the NMFS Open Science docker stack.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "py-rocket-base",
    "section": "Citation",
    "text": "Citation\nHolmes, E., Boettiger, C., López, L., & Panda, Y. (2024). py-rocket-base: Pangeo and Rocker docker image for earth science computing. https://doi.org/10.5281/zenodo.13942617",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "py-rocket-base",
    "section": "",
    "text": "See the Developer section of the documentation for other approaches for installing R/RStudio and the design goals for py-rocket-base.↩︎",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "customizing.html",
    "href": "customizing.html",
    "title": "1  Using py-rocket-base",
    "section": "",
    "text": "1.1 helper scripts\npy-rocket-base is designed to be used in the FROM line of a Dockerfile similar to rocker images. It includes directories called \\pyrocket_scripts and \\rocker_scripts that will help you do common tasks for scientific docker images. You do not have to use these scripts. If you are familiar with writing Docker files, you can write your own code. The exception is installation of Desktop files. Properly adding Desktop applications to py-rocket-base requires the use of the \\pyrocket_scripts/install-desktop.sh script. The start file is also an exception. See the discussion in the configuration files.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using py-rocket-base</span>"
    ]
  },
  {
    "objectID": "customizing.html#helper-scripts",
    "href": "customizing.html#helper-scripts",
    "title": "1  Using py-rocket-base",
    "section": "",
    "text": "1.1.1 pyrocket scripts\nHow to use the helper scripts is shown in configuration files. The helper scripts provide code to do common tasks. Users can write their own Docker file code to do these tasks but the helper scripts provide standardized code. The scripts are\n\ninstall-conda-packages.sh\ninstall-pip-packages.sh\ninstall-r-packages.sh\ninstall-apt-packages.sh\ninstall-vscode-extensions.sh\ninstall-desktop.sh\nsetup-start.sh\nrun-postbuild.sh\n\n\n\n1.1.2 rocker scripts\nThe rocker docker stack also includes a set of scripts for extending rocker packages. These are included py-rocket-base.\n\n\n1.1.3 Calling the scripts\nThe format for calling the pyrocket and rocker scripts is the following.\npyrocket scripts take files (or a path to a directory with Desktop files) as arguments. The COPY command is needed to copy the file into the Docker build context where it can be used in RUN commands. Without this you will get a “file not found” error. Removing the file after you are done with it will clean up your image files.\nCOPY environment.yml environment.yml\nRUN /pyrocket_scripts/install-conda-packages.sh environment.yml && \\\n  rm environment.yml\nRocker scripts do not take arguments. Note that PATH must be given since rocker installation scripts will fail with conda on the path. The path specification will apply only within the specific RUN context and must be in the same RUN that the rocker script is run. The scripts should be run as root.\nUSER root\nRUN PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin && \\\n    /rocker_scripts/install_geospatial.sh\nUSER ${NB_USER}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using py-rocket-base</span>"
    ]
  },
  {
    "objectID": "customizing.html#repository-file-structure",
    "href": "customizing.html#repository-file-structure",
    "title": "1  Using py-rocket-base",
    "section": "1.2 Repository file structure",
    "text": "1.2 Repository file structure\nHere is a typical repo structure. Only the Dockerfile is required. The rest are optional. The exact files names, apt.txt, environment.yml, requirements.txt, install.R, etc are optional, meaning you can name these files whatever you want. The pyrocket scripts take filename or directory arguments.\nyour-repo/\n├── Dockerfile\n├── apt.txt\n├── environment.yml\n├── install.R\n├── requirements.txt\n├── postBuild\n├── start\n├── Desktop/\n│   ├── qgis.desktop\n│   ├── qgis.xml\n│   └── qgis.png\nRead configuration_files to learn about the files. Read Desktop to learn about the Desktop folder and files for applications.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using py-rocket-base</span>"
    ]
  },
  {
    "objectID": "customizing.html#examples",
    "href": "customizing.html#examples",
    "title": "1  Using py-rocket-base",
    "section": "1.3 Examples",
    "text": "1.3 Examples\n\n1.3.1 Add some Python packages\nYou want to add some Python packages to the conda notebook environment.\nyour-repo/\n├── Dockerfile\n├── environment.yml\nDockerfile\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY environment.yml environment.yml\nRUN /pyrocket_scripts/install-conda-packages.sh environment.yml && \\\n  rm environment.yml\nenvironment.yml\nname: required\nchannels:\n  - conda-forge\ndependencies:\n  - cmocean\n  - numpy\n\n\n1.3.2 Add R packages\nAdd an R script to install packages. Important: packages that have linux dependencies (e.g. all the spatial packages depend on GDAL) will not work if you use install.packages(). GDAL will not be installed.\nyour-repo/\n├── Dockerfile\n├── install.R\nDockerfile\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY install.R install.R\nRUN /pyrocket_scripts/install-r-packages.sh install.R && rm install.R\ninstall.R\n# to match rocker/verse:4.4 used in py-rocker-base\n# look up the date that the Rocker image was created and put that\nrepo &lt;- \"https://p3m.dev/cran/__linux__/jammy/2024-05-13\"\nlist.of.packages &lt;- c(\"ncdf4\", \"httr\", \"plyr\", \"lubridate\")\ninstall.packages(list.of.packages, repos=repo)\n\n\n1.3.3 Add some linux packages\nYou want to add some linux packages with apt-get. apt-get requires root so you will need to switch to root and switch back to ${NB_USER}.\nyour-repo/\n├── Dockerfile\n├── apt.txt\nDockerfile\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nUSER root\nCOPY apt.txt apt.txt\nRUN /pyrocket_scripts/install-apt-packages.sh apt.txt && rm apt.txt\nUSER ${NB_USER}\napt.txt\n# a package\nlibgl1-mesa-glx\n\n# Another\nvim\n\n\n1.3.4 Add R geospatial packages\nGeospatial packages require some linux packages. To get this working in your Docker image add this to your Docker file:\nDockerfile\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nUSER root\nRUN PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin && \\\n    /rocker_scripts/install_geospatial.sh\nUSER ${NB_USER}\nYou have access to all the rocker scripts and you can run these similar to the line above.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using py-rocket-base</span>"
    ]
  },
  {
    "objectID": "configuration_files.html",
    "href": "configuration_files.html",
    "title": "2  Customization scripts",
    "section": "",
    "text": "2.1 install-conda-packages.sh\nThe helper scripts at /pyrocket_scripts in the image scripts to help do common tasks for extending the py-rocket-base image. Users can write their own Docker file code to do these tasks but the helper scripts provide standardized code for these tasks. The scripts are\nNote there are a few more scripts in /py-rocket-scripts but those are tailored more to the base-image creation rather than extending the base image.\nThe install-conda-packages.sh script will install conda packages to the conda notebook environment, the user environment in the py-rocket-base image (same as for pangeo and repo2docker images).\nHere is the code for your Docker file. You can name the conda package file to something other than environment.yml. Make sure your file has name:. The name is arbitrary. It is ignored but required for the script.\nenvironment.yml\nInstead of a list of conda packages (typically called environment.yml), you can use a conda lock file instead.\nHere is the code for your Docker file. You can name your conda lock file something other than conda-lock.yml.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#install-conda-packages.sh",
    "href": "configuration_files.html#install-conda-packages.sh",
    "title": "2  Customization scripts",
    "section": "",
    "text": "FROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY environment.yml environment.yml\nRUN /pyrocket_scripts/install-conda-packages.sh environment.yml && rm environment.yml\n\nname: required\nchannels:\n  - conda-forge\ndependencies:\n  - cmocean\n  - numpy\n\n\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY conda-lock.yml conda-lock.yml\nRUN /pyrocket_scripts/install-conda-packages.sh conda-lock.yml && rm conda-lock.yml",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#install-pip-packages.sh",
    "href": "configuration_files.html#install-pip-packages.sh",
    "title": "2  Customization scripts",
    "section": "2.2 install-pip-packages.sh",
    "text": "2.2 install-pip-packages.sh\nThe install-pip-packages.sh script will install packages using pip. Here is the code for your Docker file. You can name your pip package file something other than requirements.txt.\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY requirements.txt requirements.txt\nRUN /pyrocket_scripts/install-pip-packages.sh requirements.txt && rm requirements.txt\nrequirements.txt\n#a package\nharmony-py",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#install-r-packages.sh",
    "href": "configuration_files.html#install-r-packages.sh",
    "title": "2  Customization scripts",
    "section": "2.3 install-r-packages.sh",
    "text": "2.3 install-r-packages.sh\nThe install-r-packages.sh script will run the supplied R script which you can use to install R packages to the system library.\nHere is the code for your Docker file. You can name the R script file to something other than install.R. Make sure your file is an R script.\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY install.R install.R\nRUN /pyrocket_scripts/install-r-packages.sh install.R && rm install.R\ninstall.R example\n# to match rocker/verse:4.4 used in py-rocker-base\n# look up the date that the Rocker image was created and put that\nrepo &lt;- \"https://p3m.dev/cran/__linux__/jammy/2024-05-13\"\nlist.of.packages &lt;- c(\"ncdf4\", \"httr\", \"plyr\", \"lubridate\")\ninstall.packages(list.of.packages, repos=repo)\n\n2.3.1 Add R geospatial packages\nGeospatial packages require some linux packages. To get this working in your Docker image add this to your Docker file:\nDockerfile\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nUSER root\nRUN PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin && \\\n    /rocker_scripts/install_geospatial.sh\nUSER ${NB_USER}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#install-apt-packages.sh",
    "href": "configuration_files.html#install-apt-packages.sh",
    "title": "2  Customization scripts",
    "section": "2.4 install-apt-packages.sh",
    "text": "2.4 install-apt-packages.sh\nThe install-apt-packages.sh script will install packages with apt-get. Here is the code for your Docker file. You can name the apt file of packages names to something other than apt.txt. Comments and newlines are allowed. Installation requires root.\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nUSER root\nCOPY apt.txt apt.txt\nRUN /pyrocket_scripts/install-apt-packages.sh apt.txt && rm apt.txt\nUSER ${NB_USER}\napt.txt example\n# Some useful stuff\ntk-dev\n\n# Add some more\ncmocean",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#run-postbuild.sh",
    "href": "configuration_files.html#run-postbuild.sh",
    "title": "2  Customization scripts",
    "section": "2.5 run-postbuild.sh",
    "text": "2.5 run-postbuild.sh\nThe run-postbuild.sh script can be run as root or jovyan (${NB_USER}). The script has some extra code to remove leftover files after installing Python extensions.\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY postBuild postBuild\nRUN /pyrocket_scripts/run-postbuild.sh postBuild && rm postBuild\npostBuild\n#!/bin/bash -l\nset -e\n\n&lt;bash commands&gt;",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#setup-start.sh",
    "href": "configuration_files.html#setup-start.sh",
    "title": "2  Customization scripts",
    "section": "2.6 setup-start.sh",
    "text": "2.6 setup-start.sh\nThe start bash code is run when the image starts. py-rocker-base has a start script at ${REPO_DIR}/start which loads the Desktop applications. If you change that start file (by copying your start file onto that location), then the Desktop apps will not be loaded properly. Instead, the setup-start.sh will add your start file to a directory ${REPO_DIR}/childstarts and will run all those scripts after ${REPO_DIR}/start.\nThe setup-start.sh script will move the file you provide into ${REPO_DIR}/childstarts. As usual you can name your script something other than start.\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY start start\nRUN /pyrocket_scripts/setup-start.sh start && rm start",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#install-vscode-extensions.sh",
    "href": "configuration_files.html#install-vscode-extensions.sh",
    "title": "2  Customization scripts",
    "section": "2.7 install-vscode-extensions.sh",
    "text": "2.7 install-vscode-extensions.sh\nThe install-vscode-extensions.sh script will add VSCode extensions to the conda notebook environment (in ${CONDA_PREFIX}/share/code-server/extensions).\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nCOPY vscode-extensions.txt vscode-extensions.txt\nRUN /pyrocket_scripts/install-vscode-extensions.sh vscode-extensions.txt && \\\n  rm vscode-extensions.txt\nvscode-extensions.txt\ngitlens\nindent-rainbow\ncode-spell-checker\nprettier",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "configuration_files.html#desktop-applications",
    "href": "configuration_files.html#desktop-applications",
    "title": "2  Customization scripts",
    "section": "2.8 Desktop applications",
    "text": "2.8 Desktop applications\nSee the chapter on Desktop applications.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Customization scripts</span>"
    ]
  },
  {
    "objectID": "r-packages.html",
    "href": "r-packages.html",
    "title": "3  R packages",
    "section": "",
    "text": "To install extra R packages in your Docker image, use install.R and Rscript in your Docker file.\nCOPY install.R /tmp/install.R\nRUN Rscript /tmp/install.R\nMake sure to install to \"${R_HOME}/site-library\" since by default install.packages() will install to the user library in /home and that will be replaced with the user home directory in Jupyter Hub with a persistent home directory.\ninstall.R\nrepo &lt;- \"https://p3m.dev/cran/__linux__/jammy/2024-05-13\"\nlib &lt;- \"${R_HOME}/site-library\"\nlist.of.packages &lt;- c(\"ggplot2\",\"remotes\", lib=lib)\ninstall.packages(list.of.packages, repos=repo, lib=lib)\nremotes::install_github(\"hadley/httr@v0.4\", lib=lib)\nYou can also use the helper script which make sure packages go to the site-library:\nCOPY . /tmp2/\nRUN /pyrocket_scripts/install-r-packages.sh /tmp2/install.R\n\n3.0.1 Spatial libraries\nSome packages depend on linux packages. One example are spatial packages like sf which depend on GDAL. In this case\ninstall.packages(\"sf\")\nwill not work because it will not install the linux package dependencies.\nThere are a few ways to get around this.\n\nInstall the necessary linux packages via apt-get. This can be hard.\nInstall via via /rocker_scipts/install_geospatial.sh To do this include\nRUN echo '.libPaths(file.path(Sys.getenv(\"R_HOME\"), \"site-library\"))' &gt; /tmp/rprofile.site\nRUN env R_PROFILE=/tmp/rprofile.site \\\n      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n      /rocker_scripts/install_geospatial.sh\nRUN rm /tmp/rprofile.site\nin your Dockerfile. The extra code with a temporary R_PROFILE makes sure everything is installed to \"${R_HOME}/site-library\" and that the PATH does not have conda on it, which would break the needed linux installs.\nUse r2u which has Ubuntu binaries with all the dependencies included.\n\n\n\n3.0.2 Default CRAN repository\nThe default CRAN repository is set in ${R_HOME}/etc/Rprofile.site and the CRAN environmental variable is set to the date pinned version associated with the R version in the image. For example, https://p3m.dev/cran/__linux__/jammy/2024-10-30.\nTo set a different repo, edit ${R_HOME}/etc/Rprofile.site if you are changing an image or ~/.Rprofile if setting user defaults:\noptions(repos = c(CRAN = 'https://p3m.dev/cran/__linux__/jammy/latest'), download.file.method = 'libcurl')\nYou can also specify the repo to use in install.packages() like so\nrepo &lt;- \"https://p3m.dev/cran/__linux__/jammy/latest\"\nlist.of.packages &lt;- c(\"maps\", \"mapdata\", \"RColorBrewer\")\ninstall.packages(list.of.packages, repos=repo)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R packages</span>"
    ]
  },
  {
    "objectID": "desktop.html",
    "href": "desktop.html",
    "title": "4  Desktop",
    "section": "",
    "text": "4.1 Adding an application in your child docker image\npy-rocket-base includes the xfce4 Desktop UI where you can run applications. It is built off freedesktop (which is helpful to know if you are debugging and configuring). A common application is to run QGIS or java-based applications. py-rocket-base looks for files with the ending .desktop, .xml (optional), and .png or .svg (optional) associated with an application in a directory called Desktop in your repo.\npy-rocket-base puts these .desktop files in /usr/share/Desktop. Typically these desktop files are in ~/Desktop. But in a JupyterHub, the home directory is often persistent and py-rocket-base tries not to alter the user home directory. Also there might be orphaned desktop files in ~/Desktop and so the user desktop UI would be inconsistent between users. Using /usr/share/Desktop does mean that users cannot add their own persistent applications to xfce4 Desktop but this would be difficult anyhow without root access in many cases.\npy-rocket-base has Java (openjdk-11-jdk and openjdk-11-jre) pre-installed as part of the rocker R/RStudio installation. So Java applications do work as long as they work with this version of Java.\nUse the pyrocket script install-desktop.sh to set up the desktop and move your files to the proper location. Provide a path to a directory with your Desktop files as the argument to the script. Here is the code for your Docker file. This script must be run as root.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Desktop</span>"
    ]
  },
  {
    "objectID": "desktop.html#adding-an-application-in-your-child-docker-image",
    "href": "desktop.html#adding-an-application-in-your-child-docker-image",
    "title": "4  Desktop",
    "section": "",
    "text": "USER root\nCOPY ./Desktop /tmp/Desktop\nRUN /pyrocket_scripts/install-desktop.sh  /tmp/Desktop && \\\n  rm -rf /tmp/Desktop\nUSER ${NB_USER}\n\n4.1.1 Create the Desktop directory\nCreate a directory for the Desktop file and add the .desktop and optional .png and .xml files. The pyrocket script install_desktop.sh will move them to the correct places (/usr/share/applications and /usr/share/Desktop, /usr/share/mime/packages and icon locations).\nyour-repo/\n├── Dockerfile\n├── optional extra files\n├── Desktop/\n│   ├── qgis.desktop\n│   ├── qgis.xml\n│   └── qgis.png\n\n4.1.1.1 .desktop file\nThe .desktop file is a configuration file that describes how an application is launched. The required parts are Name, Exec and Type. MimeType specifies what types of files the application can use (optional). If you included an icon in your Desktop directory, then that will be registered and you can use the filename without a path. However, sometimes the icon is installed with the application and in that case you need the full path. See the icon section below.\ncdat.desktop\n[Desktop Entry]\nType=Application\nName=CWUtils\nGenericName=CoastWatch Data Analysis Tool\nIcon=cdat\nTryExec=cdat\nExec=cdat %F\nTerminal=false\nStartupNotify=false\nCategories=Qt;Education;Science;Geography;\nKeywords=map;globe;\n\n\n4.1.1.2 .xml\nYou can specify the mime types via xml.\n\n\n4.1.1.3 icons\nYou can include a png or svg for the icon. py-rocket-base will place this in /usr/share/icons/hicolor. If you put your icon file in the Desktop directory in your repo, then in your desktop file, use the file name without the extension. If for some reason, your icon is not showing up, use the direct url /srv/repo/Desktop/your-icon-name.png. If the icon cache does not update properly, you have the use the full url.\nIcon=cdat\nYou can also use an absolute file path.\nIf an icon is installed with your application, it will be in the installation files.\nIcon=/srv/conda/envs/notebook/share/qgis/images/icons/qgis-icon-512x512.png\nor if you include an icon in your Desktop directory, it will be in /srv/repo/Desktop (but in that case it is also registered as an icon so you can just use cdat).\nIcon=/srv/repo/Desktop/cdat.png\n\n\n\n4.1.2 Install the application\nHow you install the application really varies. Here are 2 examples.\nQGIS\n\nadd qgis to environment.yml\nadd libgl1-mesa-glx to apt.txt\nadd the qgis.desktop file to your Desktop directory\n\nqgis.desktop\n# From: https://github.com/qgis/QGIS/blob/ltr-3_28/linux/org.qgis.qgis.desktop.in\n[Desktop Entry]\nType=Application\nName=QGIS Desktop\nGenericName=Geographic Information System\nIcon=/srv/conda/envs/notebook/share/qgis/images/icons/qgis-icon-512x512.png\nTryExec=qgis\nExec=qgis %F\nTerminal=false\nStartupNotify=false\nCategories=Qt;Education;Science;Geography;\nMimeType=application/x-qgis-project;application/x-qgis-project-container;application/x-qgis-layer-settings;application/x-qgis-layer-definition;application/x-qgis-composer-template;image/tiff;image/jpeg;image/jp2;application/x-raster-aig;application/x-raster-ecw;application/x-raster-mrsid;application/x-mapinfo-mif;application/x-esri-shape;application/vnd.google-earth.kml+xml;application/vnd.google-earth.kmz;application/geopackage+sqlite3;\nKeywords=map;globe;postgis;wms;wfs;ogc;osgeo;\nStartupWMClass=QGIS3\nCoastWatch Utilities\nAdd this to the docker file to install\nUSER root\n# Install cwutils\nRUN cd /tmp && \\\n    wget https://www.star.nesdis.noaa.gov/socd/coastwatch/cwf/cwutils-4_0_0_198-linux-x86_64.tar.gz && \\\n    tar -zxf cwutils-4_0_0_198-linux-x86_64.tar.gz && \\\n    rm -rf cwutils-4_0_0_198-linux-x86_64.tar.gz\nENV PATH=${PATH}:/tmp/cwutils_4.0.0.198/bin\nENV MANPATH=${MANPATH}:/tmp/cwutils_4.0.0.198/doc/man\nENV INSTALL4J ADD VM PARAMS=-Dsun.java2d.uiScale=2.0\nUSER ${NB_USER}\nAdd this cdat.desktop file to Desktop directory\n[Desktop Entry]\nType=Application\nName=CWUtils\nGenericName=CoastWatch Data Analysis Tool\nIcon=/srv/repo/Desktop/cdat.png\nTryExec=cdat\nExec=cdat %F\nTerminal=false\nStartupNotify=false\nCategories=Qt;Education;Science;Geography;\nKeywords=map;globe;\nAdd cdat.png icon to Desktop directory. How do you know that the command to open the application is cdat? You read the application installation documentation and it will tell you how to open the application from a terminal (command line).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Desktop</span>"
    ]
  },
  {
    "objectID": "desktop.html#whats-happening",
    "href": "desktop.html#whats-happening",
    "title": "4  Desktop",
    "section": "4.2 What’s happening",
    "text": "4.2 What’s happening\nTo add new desktop applications, one needs to do the following. py-rocket-base does these steps automatically (via the start script) so that the user only has to put files into a Desktop directory in the docker build repo.\n\nInstall the application. See examples.\nAdd a .desktop file to an application directory. py-rocket-base puts these in /usr/share/applications but you will also see ${HOME}/.local/share/applications/.\nTo have an icon on the Desktop, you create a folder Desktop and tell XDG what directory to use. The directory is specified in ~/.config/user-dirs.dirs which XDG sets. By default (XDG), this folder is ~/Desktop but you can set it to something else. py-rocket-base sets a default value in /etc/xdg/user-dirs.defaults. This updates ~/.config/user-dirs.dirs when the /etc/xdg/xfce4/xinitrc start script is run (when the /desktop button is clicked).\nXDG looks for .desktop files in the Desktop directory. py-rocket-base creates a soft link to the .desktop files in /usr/share/applications/ in /usr/share/Desktop.\n\nSee this Medium article for a description.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Desktop</span>"
    ]
  },
  {
    "objectID": "publishing.html",
    "href": "publishing.html",
    "title": "5  Publishing",
    "section": "",
    "text": "5.1 Quarto\npy-rocket-base has a number of packages to help with creation of documentation, books and webpages from content: Sphinx, Quarto, and Myst. Pandoc is installed which allows output to many different formats including html, Word, markdown and PDF. TexLive (for PDF output) is installed with tlmgr to handle package installation.\nQuarto is a full-feature platform for creation of documents, books and webpages in a variety of formats. Explore the documentation at https://quarto.org/. You can use Quarto in JupyterLab, RStudio or VSCode. RStudio has the most featured integration followed by VSCode. JupyterLab integration is somewhat minimal.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Publishing</span>"
    ]
  },
  {
    "objectID": "publishing.html#quarto",
    "href": "publishing.html#quarto",
    "title": "5  Publishing",
    "section": "",
    "text": "5.1.1 RStudio\nQuarto is fully integrated with RStudio. Use the Render and Build buttons.\nSpecial note regarding creating pdfs\nRendering to PDF or format: pdf should work fine and packages will be installed on the fly. But the package installations will not persist and you will need to install them again after you restart the server. To get the packages into the user library at ~/texmf, you need to do this in a terminal:\ntlmgr install soulpos pdfcomment luatex85\nReplace the package names with the packages you need to install.\n\n\n5.1.2 VSCode\nThe VSCode Quarto extension is installed. This provides many nice features. Read about them on the Quarto VSCode page. The extension includes keyboard shortcuts for rendering or you can render from a terminal.\n\n\n5.1.3 Jupyter Lab\nThe jupyterlab-quarto package is installed which allows Quarto markdown to be rendered in markdown cells in Jupyter notebooks (ipynb). But you will need to render from a terminal. Quarto render both qmd and ipynb files. Read about using Quarto with JupyterLab on this Quarto page. For example,\nquarto render --to pdf test.qmd\nquarto render --to html test.ipynb\nFor PDF output when running quarto render in a terminal, TexLive packages will not install on the fly and you will need to do tlmgr install packagename for any missing package errors you get. The packages will install in ~/texmf and will persist in the home directory.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Publishing</span>"
    ]
  },
  {
    "objectID": "publishing.html#myst",
    "href": "publishing.html#myst",
    "title": "5  Publishing",
    "section": "5.2 MyST",
    "text": "5.2 MyST\n\n\n\n\nMyST is an Python ecosystem of tools for creating interactive scientific publications for the web or export to PDF, LaTeX and Microsoft Word. jupyterlab-myst extension is installed. Read more about MyST in JupyterLab here. The MyST VSCode extension is also installed if you are editting MyST markdown in VSCode.\n\nCreating PDFs with Myst\nYou can output to PDF like so from a terminal: jupyter nbconvert --to pdf test.ipynb. However. TexLive packages will not install on the fly and you will need to do tlmgr install packagename for any missing package errors you get.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Publishing</span>"
    ]
  },
  {
    "objectID": "publishing.html#sphinx",
    "href": "publishing.html#sphinx",
    "title": "5  Publishing",
    "section": "5.3 Sphinx",
    "text": "5.3 Sphinx\n\n\n\n\nSphinx is a commonly used package for creating documentation for Python packages.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Publishing</span>"
    ]
  },
  {
    "objectID": "publishing.html#texlive",
    "href": "publishing.html#texlive",
    "title": "5  Publishing",
    "section": "5.4 TexLive",
    "text": "5.4 TexLive\n\n\n\n\npy-rocket-base has Quarto and Myst installed along with pandoc and TeXLive for output to PDF. The tlmgr is used (and must be used) to manage packages.\n\n\n5.4.1 Installing new TexLive packages\ntlmgr must be used.\n\nDo not use apt-get to install texlive packages. This will turn off tlmgr (the TeX package manager). Instead use\n\ntlmgr install &lt;package&gt;\n\nRun tlmgr option to make sure tlmgr is working.\n\nUnfortunately any packages you install will be in the /opt directory and this gets recreated every time you restart your server. So if you need a particular package you will need to keep installing it. Or create your own image based on py-rocket-base:\nDockerfile\nFROM ghcr.io/nmfs-opensci/py-rocket-base:latest\n\nRUN tlmgr install collection-latexrecommended && tlmgr clean --all",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Publishing</span>"
    ]
  },
  {
    "objectID": "jupyter-config.html",
    "href": "jupyter-config.html",
    "title": "6  Customizing Jupyter",
    "section": "",
    "text": "If you want to customize some feature of the JupyterHub or JupyterLab, you can do this by passing in *.json or *.py configuration files. In py-rocket-base, these are in the jupyter_server_config.d and jupyter_notebook_config.d directories in the conda notebook environment. These directories contain the json that specifies the configurations:\n/srv/conda/envs/notebook/\n└── etc/\n    └── jupyter/\n        └── jupyter_server_config.d/\n            ├── security.json\n            ├── extensions.json\n            └── custom.json\n        └── jupyter_notebook_config.d/\n            └── custom.json\nIf you want to change these configurations, you need to either update the file with the configuration or add a new configuration file. You can add either .json or .py configurations files to the same directory.\nFor example, if you want to allow hidden files to be shown in the file browser in Jupyter Lab. Add\ncustom_jupyter_server_config.json\n{\n    \"ContentsManager\": {\n        \"allow_hidden\": true\n    }\n}\nand then copy this into jupyter_server_config.d and jupyter_notebook_config.d via code in the Dockerfile or in postBuild. We copy both to notebook server config and jupyter server config, because either can be used in the JupyterHub.\nDockerfile\nCOPY custom_jupyter_server_config.json custom_jupyter_server_config.json\nRUN cp custom_jupyter_server_config.json ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_server_config.d/ && \\\n    cp custom_jupyter_server_config.json ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_notebook_config.d/ && \\\n    rm custom_jupyter_server_config.json\nAlternatively, you can add a postBuild file to your repo and py-rocket-base will automatically run this when you image builds.\npostBuild\n#!/bin/bash -l\nset -euo pipefail\n\ncp custom_jupyter_server_config.json ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_server_config.d/\ncp custom_jupyter_server_config.json ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_notebook_config.d/",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Customizing Jupyter</span>"
    ]
  },
  {
    "objectID": "example_children.html",
    "href": "example_children.html",
    "title": "7  Example child images",
    "section": "",
    "text": "7.1 py-rocket-geospatial\nThis has many geospatial R and Python packages along with QGIS, Panoply and CoastWatch utils.\nDockerfile\nenvironment.yml\ninstall.R\napt.txt",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Example child images</span>"
    ]
  },
  {
    "objectID": "example_children.html#py-rocket-geospatial",
    "href": "example_children.html#py-rocket-geospatial",
    "title": "7  Example child images",
    "section": "",
    "text": "FROM ghcr.io/nmfs-opensci/py-rocket-base/test:latest\n\nLABEL org.opencontainers.image.maintainers=\"eli.holmes@noaa.gov\"\nLABEL org.opencontainers.image.author=\"eli.holmes@noaa.gov\"\nLABEL org.opencontainers.image.source=https://github.com/nmfs-opensci/container-images/py-rocket-2\nLABEL org.opencontainers.image.description=\"Geospatial Python (3.11) and R (4.4) image with Desktop (QGIS, Panoply, CWUtils)\"\nLABEL org.opencontainers.image.licenses=Apache2.0\nLABEL org.opencontainers.image.version=2024.11.06\n\n# copy files into the build context\nCOPY . /tmp2/\n\n# The scripts will switch to NB_USER for installation if needed\nUSER root\n\n# Use install script to take care of installation tasks\nRUN /pyrocket_scripts/install-conda-packages.sh /tmp2/environment.yml\nRUN /pyrocket_scripts/install-r-packages.sh /tmp2/install.R\nRUN /pyrocket_scripts/install-apt-packages.sh /tmp2/apt.txt\nRUN /pyrocket_scripts/install-desktop.sh /tmp2/Desktop\n\n# Don't leave the files in the image\nRUN rm -rf /tmp2\n\n# install the geospatial libraries and R spatial\n# The PATH setting is required because rocker scripts need to NOT have conda on the PATH\nRUN PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin && \\\n    /rocker_scripts/install_geospatial.sh\n\n# Install cwutils\nRUN cd /tmp && \\\n    wget https://www.star.nesdis.noaa.gov/socd/coastwatch/cwf/cwutils-4_0_0_198-linux-x86_64.tar.gz && \\\n    tar -zxf cwutils-4_0_0_198-linux-x86_64.tar.gz && \\\n    rm -rf cwutils-4_0_0_198-linux-x86_64.tar.gz\nENV PATH=${PATH}:/tmp/cwutils_4.0.0.198/bin\nENV MANPATH=${MANPATH}:/tmp/cwutils_4.0.0.198/doc/man\nENV INSTALL4J ADD VM PARAMS=-Dsun.java2d.uiScale=2.0\n\n# Install panoply\nRUN cd /tmp && \\\n  wget --user-agent=\"Mozilla/5.0\" https://www.giss.nasa.gov/tools/panoply/download/PanoplyJ-5.5.5.tgz && \\\n  tar -zxf PanoplyJ-5.5.5.tgz && \\\n  rm -rf PanoplyJ-5.5.5.tgz\nENV PATH=${PATH}:/tmp/PanoplyJ\n\nUSER ${NB_USER}\nWORKDIR ${HOME}\n\nname: py-rocket-geospatial \n# 2024-11-01\nchannels:\n  - conda-forge\n  - nodefaults\n\ndependencies:\n  # Core scientific python stack\n  - cython # optimization, C API access\n  - flox # optimization, xarray operations\n  - hypothesis # needed by numpy testing tools\n  - networkx\n  - numba # high-performance numerics\n  - numpy\n  - pandas\n  - scikit-image\n  - scikit-learn\n  - scipy\n  - statsmodels\n  - pymannkendall # non-parametric Mann-Kendall trend analysis\n  - sympy\n  - xarray&gt;=2024.05.0\n\n  # Visualization packages\n  - bokeh\n  - cartopy # geospatial plotting with matplotlib\n  - geemap\n  - geoviews\n  - hvplot\n  - ipyleaflet\n  - ipympl # This enables matplotlib interaction with jupyter widgets\n  - leafmap\n  - lonboard\n  - matplotlib\n  - plotly\n  - seaborn # statistical plotting with matplotlib\n  - cmocean # colormaps for ocean\n  - imageio # helps writing image files\n  - apng # create animation from multiple png\n  - holoviews\n  - graphviz\n  - bqplot # 2-D visualization system\n  - regionmask # create masks of (geo)spatial regions\n\n  # Machine Learning packages\n  - py-xgboost~=2.1.1=cpu*\n\n  # Geospatial data packages\n  - geopandas&gt;=0.14.4\n  - pygmt\n  - rasterio\n  - rioxarray\n  - rasterstats # summarize geospatial raster datasets based on vector geometries\n  - pyresample # resampling geospatial image data\n  - shapely # manipulation and analysis of planar geometric objects\n  - pyproj\n  - datashader\n\n  # File formats and file management, download, dataset caching\n  - h5py\n  - h5netcdf\n  - nco\n  - pooch\n  - zarr\n  - kerchunk\n  - rechunker\n  - cftime # for decoding time units and variable values in a netCDF file\n  - h5coro # reading HDF5 data stored in S3\n  - hdf5plugin # provides HDF5 compression filters\n  - lxml # processing XML and HTML\n  - pynco # python style access to the NetCDF Operators (NCO)\n\n  # Cloud access tools and libraries\n  - awscli\n  - awscliv2\n  - boto3\n  - s3fs&gt;=2023.6.0\n  # handle login and similar details for accessing earthdata protected data\n  # Access datasets exposed via STAC\n  - pystac-client\n  - stackstac\n  # Access datasets exposed via intake catalogs\n  - intake\n  - intake-esm&gt;=2023.7.7\n  - intake-stac==0.4.0\n  - intake-xarray==0.6.1\n  - gcsfs&gt;=2023.5.0\n  - certifi # Root Certificates for validating the trustworthiness of SSL certificates.\n\n  # Specific cloud access libraries\n  - copernicusmarine # get data from copernicus\n  - earthaccess&gt;=0.11.0 # get data from nasa earth access\n  - pydap # OPeNDAP implementation\n  - erddapy # connect to erddap servers\n  - ecmwflibs # wraps some of European Centre for Medium-Range Weather Forecasts libraries\n  - harmony-py\n\n  # Distributed computing\n  - dask&gt;=2023.12.1\n  - dask-labextension\n  - dask-geopandas\n  - coiled\n\n  # Other useful generic python packages\n  - pillow # Python imaging library, useful for many image-related tasks\n  - pytest\n  - pytest-cov\n  - pep8\n  - flake8\n  - tqdm # progress bars, with notebook support\n  - joblib # lightweight pipelining in Python\n\n  # Packages specific to climate and ocean data work\n  - esmpy\n  - xmip\n  - spectral # pure Python module for processing hyperspectral image data\n\n  # Desktop tools\n  - qgis \n  - pyopencl  # Maybe needed for qgis? https://github.com/conda-forge/qgis-feedstock/issues/263\n  # Resolves warning \"No ICDs were found\": https://github.com/CryoInTheCloud/hub-image/issues/50\n  - ocl-icd-system\n  \n  # Quarto\n  - quarto\n  - pip:\n    - xq # Apply XPath expressions to XML\n    - jupyterlab-quarto\n\n#! /usr/local/bin/Rscript\n# install R dependencies\n\n# to match rocker/verse:4.4 used in py-rocker-base\n# look up the date that the Rocker image was created and put that\nrepo &lt;- \"https://p3m.dev/cran/__linux__/jammy/2024-05-13\"\n\ninstall.packages(c(\"rstac\", \"quarto\", \"aws.s3\", \"reticulate\", \"gdalcubes\", \"rnaturalearth\"), repos=repo)\ninstall.packages(\"rnaturalearthdata\", repos=repo)\n\nremotes::install_github('r-tmap/tmap', upgrade=FALSE)\n# CRAN version is out of date\ndevtools::install_github(\"boettiger-lab/earthdatalogin\")\n\n# CoastWatch required\nlist.of.packages &lt;- c(\"parsedate\", \"reshape2\", \"gridGraphics\", \"PBSmapping\",   \n                      \"date\", \"openair\", \"cmocean\", \"plotdap\", \"rerddapXtracto\")\ninstall.packages(list.of.packages, repos=repo)\n\n# for qgis\nlibgl1-mesa-glx",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Example child images</span>"
    ]
  },
  {
    "objectID": "r-config.html",
    "href": "r-config.html",
    "title": "8  R in Jupyter Lab and Python in RStudio",
    "section": "",
    "text": "8.1 Installing R packages\npy-rocket has separate R and Python installations because there are a variety of system packages linkages (GDAL and others depending whyat you are doing) that will break if you do not use the right system linkages. The way this is handled is via the the system PATH. This tells functions where to look for files it needs.\nAs long as you only use R or Python (don’t mix the two) in a notebook, you will be fine in py-rocket. When you activate R, the path will not have conda. When you activate Python, it will have use the conda “notebook” environment and have that on the path.\nTry this in R (RStudio or the R kernel in Jupyter Lab):\nTry this in a Jupyter Notebook in Jupyter Lab:\nThere is a user directory specified by default in the user’s home directory. If this is persistent, then packages installed using\nwill by default be installed there and will be persistent.\nThe 2nd and 3rd paths on .libPaths() are in the /usr directory and will be recreated each time the Jupyter Hub is restarted and thus any package installed there by the user will disappear.\nHowever, this means that if you are installing R package in a Docker image, they will by default go to the /home/jovyan user library and that will get wiped out in a Jupyter Hub where the user home is persistent since whatever is in /home during the Docker build will be replaced by the user home directory. In a Docker build, make sure to use\nor use the helper script plus a install.R file in your Docker file:",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R in Jupyter Lab and Python in RStudio</span>"
    ]
  },
  {
    "objectID": "r-config.html#installing-r-packages",
    "href": "r-config.html#installing-r-packages",
    "title": "8  R in Jupyter Lab and Python in RStudio",
    "section": "",
    "text": "install.packages()\n\n\n\ninstall.packages(...., lib=\"${R_HOME}/site-library\")\n\nCOPY . /tmp2/\nRUN /pyrocket_scripts/install-r-packages.sh /tmp2/install.R",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R in Jupyter Lab and Python in RStudio</span>"
    ]
  },
  {
    "objectID": "r-config.html#using-r-in-jupyter-lab",
    "href": "r-config.html#using-r-in-jupyter-lab",
    "title": "8  R in Jupyter Lab and Python in RStudio",
    "section": "8.2 Using R in Jupyter Lab",
    "text": "8.2 Using R in Jupyter Lab\nIn Jupyter Lab, you select a R kernel from the upper right. You can then use R code in the notebook. It will use the R installation in py-rocket with all the preloaded libraries.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R in Jupyter Lab and Python in RStudio</span>"
    ]
  },
  {
    "objectID": "r-config.html#using-python-in-r-rstudio-or-jupyter-lab-with-r-kernel",
    "href": "r-config.html#using-python-in-r-rstudio-or-jupyter-lab-with-r-kernel",
    "title": "8  R in Jupyter Lab and Python in RStudio",
    "section": "8.3 Using Python in R (RStudio or Jupyter Lab with R kernel)",
    "text": "8.3 Using Python in R (RStudio or Jupyter Lab with R kernel)\nThe following behavior is specific to R, not the GUI (RStudio or Jupyter Lab with R kernel) that you are using to interact with it.\n\n8.3.1 py_require()\nTo use Python, you use the reticulate library. If you only need a handful of Python packages, it will simplify things if you use py_require(). Like this\nlibrary(reticulate)\npy_require(\"xarray\")\nThis will create an ephemeral environment with the packages you require and does not change the system PATH or put conda/envs/notebook on the path. Everything should work fine though I have not tested dask.\nOne gotcha is that reticulate create a cache in ~/.cache/R/reticulate and it might not be easy to change later to using a conda environment for your Python binary. I often had to do\nrm ~/.cache/R/reticulate\nin a terminal to get reticulate to allow me to use use_conda(\"notebook\") in another R session.\n\n\n8.3.2 Using a conda environment\nYou can also use the conda environment with reticulate with all the pre-installed packages.\nlibrary(reticulate)\nuse_condaenv(\"notebook\")\nHowever this will prepend conda to the system path and that will persist until you RESTART R. In RStudio, it is not enough to close the script or notebook you are working in; you actually have to restart R. reticulate does not have a deactivate_conda() function. In Jupyter Lab, your notebooks are isolated from each other and each has its own kernel, so whatever path changes you do in one notebook do not affect other notebooks. This is not the case for RStudio.\n\"/srv/conda/condabin:/srv/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/sbin:/usr/bin:/usr/local/texlive/bin/x86_64-linux:$PATH:/usr/local/texlive/bin/x86_64-linux:/usr/lib/rstudio-server/bin/quarto/bin:/usr/lib/rstudio-server/bin/postback\"\nIf you use use_condaenv() in an R session and need to restore the normal path (to get R libraries that bind to system packages to work), you can do the following:\norig &lt;- Sys.getenv(\"RSTUDIO_CLEAN_PATH\", unset = NA)\norig # make sure it looks right\nSys.setenv(PATH = orig)\nNote, the terminal in RStudio is not the same environment as R. So doing echo $PATH in the terminal in RStudio will still show the original path without conda.\nWhy activating conda causes problems for R\nWhen we use a conda environment, the PATH is altered so that the conda environment directory appears first on the PATH. Any R packages that need a particular system package that is also in conda (like GDAL) are likely to throw mis-match errors.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R in Jupyter Lab and Python in RStudio</span>"
    ]
  },
  {
    "objectID": "r-config.html#dealing-with-ssl-mismatch-errors",
    "href": "r-config.html#dealing-with-ssl-mismatch-errors",
    "title": "8  R in Jupyter Lab and Python in RStudio",
    "section": "8.4 Dealing with SSL mismatch errors",
    "text": "8.4 Dealing with SSL mismatch errors\nWhen you use reticulate in R, use use_condaenv() and call a function that needs to download data, you are liable to get a OpenSSL mismatch error. py-rocket solves this by adding this to\nrsession-ld-library-path=/srv/conda/envs/notebook/lib\nto /etc/rstudio/rserver.conf. This let’s R know where to look for SSL links and hopefully doesn’t break R packages. Make sure that .Renviron does not set LD_LIBRARY_PATH or this solution will not work. I don’t know why but it breaks.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R in Jupyter Lab and Python in RStudio</span>"
    ]
  },
  {
    "objectID": "r-config.html#developers",
    "href": "r-config.html#developers",
    "title": "8  R in Jupyter Lab and Python in RStudio",
    "section": "8.5 Developers",
    "text": "8.5 Developers\nHow is the R kernel created so that it shows up in Jupyter Lab? You don’t need to install R into the conda environment since it already is in the image. We just need to use IRkernel R package to register the kernel with jupyter.\nRscript - &lt;&lt;-\"EOF\"\ninstall.packages('IRkernel', lib = .Library) # install in system library\nSys.setenv(PATH = paste(\"/srv/conda/envs/notebook/bin\", Sys.getenv(\"PATH\"), sep = \":\"))\nIRkernel::installspec(name = \"ir\", displayname = \"R ${R_VERSION}\")\nEOF",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R in Jupyter Lab and Python in RStudio</span>"
    ]
  },
  {
    "objectID": "developers.html",
    "href": "developers.html",
    "title": "9  Developer notes",
    "section": "",
    "text": "9.1 Design\npy-rocket-base is inspired by repo2docker and the Pangeo Docker stack design. py-rocker-base is built using repo2docker (via repo2docker-action) and thus lets repo2docker make the choices regarding the environment design—things like how the conda environment is set-up and the base directory structure and permissions.\nThe Pangeo Docker stack does not use repo2docker, but mimics repo2docker’s environment design. The Pangeo base-image behaves similar to repo2docker in that using the base-image in the FROM line of a Dockerfile causes the build to look for files with the same names as repo2docker’s configuration files and then do the proper action with those files. This means that routine users do not need to know how to write Dockerfile code in order to extend the image with new packages or applications. py-rocker-base Docker image uses this Pangeo base-image design. It is based on ONBUILD commands in the Dockerfile that trigger actions only when the image is used in the FROM line of another Dockerfile.\npy-rocket-base does not include this ONBUILD behavior. Instead it follows the rocker docker stack design and provides helper scripts for building on the base image. py-rocket-base a directory called \\pyrocket_scriptsthat will help you do common tasks for scientific docker images.These scripts are not required. If users are familiar with writing Docker files, they can write their own code. The use of helper scripts was used after feedback that the Pangeo ONBUILD behavior makes it harder to customize images that need very specific structure or order of operations.\nThere are many ways to install R and RStudio into an image designed for JupyterHubs The objective of py-rocker-base is not to install R and RStudio, per se, and there are other leaner and faster ways to install R/RStudio if that is your goal1. The objective of py-rocket-base is to create an JupyterHub image such when you click the RStudio button in the JupyterLab UI to enter the RStudio UI, you enter an environment that is the same as if you had used a Rocker image. If you are in the JupyterLab UI, the environment is the same as it you had used repo2docker (or Pangeo base-image) to create the environment.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#design",
    "href": "developers.html#design",
    "title": "9  Developer notes",
    "section": "",
    "text": "See for example repo2docker-r and conda-r in binder-examples.↩︎",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#documentation",
    "href": "developers.html#documentation",
    "title": "9  Developer notes",
    "section": "9.2 Documentation",
    "text": "9.2 Documentation\nTo build the documentation book, clone repo and then\ncd book\nquarto render .\nSet GitHub Pages to docs folder.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#building-the-images",
    "href": "developers.html#building-the-images",
    "title": "9  Developer notes",
    "section": "9.3 Building the images",
    "text": "9.3 Building the images\nThe .github/workflows/build.yaml is a GitHub Action to build the image. The GitHub Action builds the image and the URL will look like one of these\nghcr.io/nmfs-opensci/repo-name/image-name:latest\nghcr.io/nmfs-opensci/image-name:latest\nFor example, for this repo the image is ghcr.io/nmfs-opensci/py-rocket-base:latest.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#base-image",
    "href": "developers.html#base-image",
    "title": "9  Developer notes",
    "section": "9.4 base-image",
    "text": "9.4 base-image\nIn the directory, base-image is the Pangeo base-image Dockerfile minus the ONBUILD statements. Thus the base-image for py-rocket-base is the same as Pangeo base-image but doesn’t have the behavior of automatically processing files like environment.yml in child images (that use the base image in the FROM line).\npy-rocket-base uses base-image and adds on the pangeo-notebook metapackage which add the basic JupyterHub and JupyterLab packages. py-rocket-base then adds on R/RStudio, more conda packages and Desktop via install scripts.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#py-rocket-base",
    "href": "developers.html#py-rocket-base",
    "title": "9  Developer notes",
    "section": "9.5 py-rocket-base",
    "text": "9.5 py-rocket-base\nThe Dockerfile does the following in order:\n\nMove files into /srv/repo\nMove scripts into /pyrocket_scripts and /rocker_scripts\nInstall conda packages with the pangeo-notebook metapackage as the main set of packages plus the extra server packages\nInstall R and RStudio plus the verse set of packages with the rocker scripts\nSet up the Desktop environment and ensure that applications go into /etc/xdg/userconfig instead of $HOME.\nMove the start script to /srv/start.\n\nThe pieces of the Dockerfile are explained below. Click on the number next to code to read about what that code block does.\nFROM ghcr.io/nmfs-opensci/py-rocket-base/base-image:latest\n\n1USER root\n\n# Define environment variables\n# DISPLAY Tell applications where to open desktop apps - this allows notebooks to pop open GUIs\n2ENV REPO_DIR=\"/srv/repo\" \\\n    DISPLAY=\":1.0\" \\\n    R_VERSION=\"4.4.1\"\n\n# Add NB_USER to staff group (required for rocker script)\n# Ensure the staff group exists first\nRUN groupadd -f staff && usermod -a -G staff \"${NB_USER}\"\n\n# Copy files into REPO_DIR and make sure staff group can edit (use staff for rocker)\n3COPY --chown=${NB_USER}:${NB_USER} . ${REPO_DIR}\nRUN chgrp -R staff ${REPO_DIR} && \\\n    chmod -R g+rwx ${REPO_DIR} && \\\n    rm -rf ${REPO_DIR}/book ${REPO_DIR}/docs\n\n# Copy scripts to /pyrocket_scripts and set permissions\n4RUN mkdir -p /pyrocket_scripts && \\\n    cp -r ${REPO_DIR}/scripts/* /pyrocket_scripts/ && \\\n    chown -R root:staff /pyrocket_scripts && \\\n    chmod -R 775 /pyrocket_scripts\n\n# Install conda packages (will switch to NB_USER in script)\n5RUN /pyrocket_scripts/install-conda-packages.sh ${REPO_DIR}/environment.yml\n\n# Install R, RStudio via Rocker scripts. Requires the prefix for a rocker Dockerfile\n6RUN /pyrocket_scripts/install-rocker.sh \"verse_${R_VERSION}\"\n\n# Install extra apt packages\n# Install linux packages after R installation since the R install scripts get rid of packages\n7RUN /pyrocket_scripts/install-apt-packages.sh ${REPO_DIR}/apt.txt\n\n# Install some basic VS Code extensions\n8RUN /pyrocket_scripts/install-vscode-extensions.sh ${REPO_DIR}/vscode-extensions.txt\n\n# Re-enable man pages disabled in Ubuntu 18 minimal image\n# https://wiki.ubuntu.com/Minimal\n9RUN yes | unminimize\nENV MANPATH=\"${NB_PYTHON_PREFIX}/share/man:${MANPATH}\"\nRUN mandb\n\n# Add custom Jupyter server configurations\n10RUN mkdir -p ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_server_config.d/ && \\\n    mkdir -p ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_notebook_config.d/ && \\\n    cp ${REPO_DIR}/custom_jupyter_server_config.json  ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_server_config.d/ && \\\n    cp ${REPO_DIR}/custom_jupyter_server_config.json ${NB_PYTHON_PREFIX}/etc/jupyter/jupyter_notebook_config.d/\n\n# Set up the defaults for Desktop. \n11ENV XDG_CONFIG_HOME=/etc/xdg/userconfig\nRUN mkdir -p ${XDG_CONFIG_HOME} && \\\n    chown -R ${NB_USER}:${NB_USER} ${XDG_CONFIG_HOME} && \\\n    chmod -R u+rwx,g+rwX,o+rX ${XDG_CONFIG_HOME} && \\\n    mv ${REPO_DIR}/user-dirs.dirs ${XDG_CONFIG_HOME} && \\\n    chmod +x ${REPO_DIR}/scripts/setup-desktop.sh && \\\n    ${REPO_DIR}/scripts/setup-desktop.sh\n\n# Fix home permissions. Not needed in JupyterHub with persistent memory but needed if not used in that context\n12RUN /pyrocket_scripts/fix-home-permissions.sh\n\n# Set up the start command \n13USER ${NB_USER}\nRUN chmod +x ${REPO_DIR}/start \\\n    && cp ${REPO_DIR}/start /srv/start\n    \n# Revert to default user and home as pwd\n14USER ${NB_USER}\nWORKDIR ${HOME}\n\n1\n\nSome commands need to be run as root, such as installing linux packages with apt-get\n\n2\n\nSet variables. CONDA_ENV is useful for child builds\n\n3\n\nCopy the py-rocket-base files into /srv/repo directory. book and docs are the documentation files and are not needed in the image.\n\n4\n\nCopy the pyrocket scripts into the image and set the permissions so they can be executed by the staff group (which includes jovyan). The pyrocket scripts are used to do most of the installation tasks and these can also be used to extend py-rocket-base.\n\n5\n\nUse the pyrocket script to install the conda packages in environment.yml. The script does clean-up. The core package is the pangeo-notebook metapackage to this are added some JupyterLab extensions and packages needed for RStudio and Desktop. Scientific packages are not added here. They will be added via child images that use py-rocket-base as the base image (in the FROM line).\n\n6\n\nThis section runs the script install-rocker.sh which installs R and RStudio using rocker scripts.\n\n7\n\nThe linux packages are installed with the install-apt-packages script which takes care of clean-up. These packages need to be installed after R is installed because the R scripts uninstall packages as part of cleanup.\n\n8\n\nThe VSCode extensions are installed into the conda environment directory since instead of the home directory since the home directory is replaced by the user persistent home directory in a JupyterHub.\n\n9\n\nUbuntu does not have man pages installed by default. These lines activate man so users have the common help files.\n\n10\n\nThis is some custom jupyter config to allow hidden files to be listed in the folder browser.\n\n11\n\nSetting up Desktop. Keep config in the /etc so doesn’t trash user environment (that they might want for other environments). Setting up Desktop configuration very poorly documented. The key is setting the environmental variable XDG_CONFIG_HOME and then putting the file user-dirs.dirs within that directory. In that file, one can specify XDG_DESKTOP_DIR=\"/usr/share/Desktop\" which says where application files are kept.\n\n12\n\nEnsure that none of the directories in /home are owned by root. When the image is used in a JupyterHub, this won’t matter if home is replaced by the user persistent directory but in other applications having any directories in home owned by root will cause problems.\n\n13\n\nThe start file mainly includes a subshell to run any start files used in extenstions from the py-rocket-base image.\n\n14\n\nThe parent docker build completes by setting the user to jovyan and the working directory to ${HOME}. Within a JupyterHub deployment, ${HOME} will often be re-mapped to the user persistent memory so it is important not to write anything that needs to be persistent to ${HOME}, for example configuration. You can do this in the start script since that runs after the user directory is mapped or you can put configuration files in some place other than ${HOME}.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#install-rocker.sh",
    "href": "developers.html#install-rocker.sh",
    "title": "9  Developer notes",
    "section": "9.6 install-rocker.sh",
    "text": "9.6 install-rocker.sh\nThis script will copy in the rocker scripts from rocker-versioned2 into ${REPO_DIR} to install things. It will read in one of the rocker docker files using R_DOCKERFILE defined in the appendix file (which is inserted into the main docker file). Variables defined here will only be available in this script. Click on the numbers in the script to learn what each section is doing.\n#!/bin/bash\nset -e\n\n# Copy in the rocker files. Work in ${REPO_DIR} to make sure I don't clobber anything\n1cd ${REPO_DIR}\nwget https://github.com/rocker-org/rocker-versioned2/archive/refs/tags/R${R_VERSION}.tar.gz\ntar zxvf R${R_VERSION}.tar.gz && \\\n2mv rocker-versioned2-R${R_VERSION}/scripts /rocker_scripts && \\\n3ROCKER_DOCKERFILE_NAME=\"${R_DOCKERFILE}.Dockerfile\"\nmv rocker-versioned2-R${R_VERSION}/dockerfiles/${ROCKER_DOCKERFILE_NAME}  /rocker_scripts/original.Dockerfile && \\\n4rm R${R_VERSION}.tar.gz && \\\nrm -rf rocker-versioned2-R${R_VERSION}\n\n5cd /\n6# Read the Dockerfile and process each line\nwhile IFS= read -r line; do\n7    # Check if the line starts with ENV or RUN\n    if [[ \"$line\" == ENV* ]]; then\n        # Assign variable\n        var_assignment=$(echo \"$line\" | sed 's/^ENV //g')\n8        # Replace ENV DEFAULT_USER=\"jovyan\"\n        if [[ \"$var_assignment\" == DEFAULT_USER* ]]; then\n            var_assignment=\"DEFAULT_USER=${NB_USER}\"\n        fi\n        # Run this way eval \"export ...\" otherwise the \" will get turned to %22\n9        eval \"export $var_assignment\"\n        # Write the exported variable to env.txt\n10        echo \"export $var_assignment\" &gt;&gt; ${REPO_DIR}/env.txt\n11    elif [[ \"$line\" == RUN* ]]; then\n        # Run the command from the RUN line\n        cmd=$(echo \"$line\" | sed 's/^RUN //g')\n        echo \"Executing: $cmd\"\n        eval \"$cmd\" # || echo ${cmd}\" encountered an error, but continuing...\"\n    fi\n12done &lt; /rocker_scripts/original.Dockerfile\n\n13# Install extra tex packages that are not installed by default\nif command -v tlmgr &&gt; /dev/null; then\n    echo \"Installing texlive collection-latexrecommended...\"\n    tlmgr install collection-latexrecommended\n    tlmgr install pdfcol tcolorbox eurosym upquote adjustbox titling enumitem ulem soul rsfs\nfi\n\n1\n\nThe rocker-versioned2 repository for a particular R version is copied into {REPO_DIR} and unzipped. R_VERSION is defined in appendix.\n\n2\n\nThe unzipped directory will be named rocker-versioned2-R${R_VERSION}. We move the scripts directory to /rocker_scripts (base level) because the rocker scripts expect the scripts to be there.\n\n3\n\nR_DOCKERFILE is defined as verse_${R_VERSION}. The docker file we will process (find ENV and RUN lines) is called ROCKER_DOCKERFILE_NAME in the rocker files. We move this to /rocker_scripts/original.Dockerfile so we can refer to it later.\n\n4\n\nClean up the rocker directories that we no longer need.\n\n5\n\ncd to the base level where /rocker_scripts is.\n\n6\n\nThe big while loop is processing /rocker_scripts/original.Dockerfile. The code is using piping &gt; and the input file and pipe is specified at the end of the while loop code.\n\n7\n\nThis looks if the line starts with ENV and if it does, it strips off ENV and stores the variable assigment statement to $var_assignment.\n\n8\n\nThe rocker docker files do not use the NB_USER environmental variable (defined in appendix). If the ENV line is defining the default user, we need to change that assignment to the variable NB_USER. This part is specific to the rocker docker files.\n\n9\n\nWe need to export any variables (ENV) found in the docker file so it is available to the scripts that will run in the RUN statements. We need to export the variables as done here (with eval and export) otherwise they don’t make it to the child scripts about to be run. Getting variables to be exported to child scripts being called by a parent script is tricky and this line required a lot of testing and debugging to get variables exported properly.\n\n10\n\nThe export line will only make the variable available to the child scripts. We also want them available in the final image. To do that, we write them to a file that we will source from the docker file. Scripts are run in an ephemeral subshell during docker builds so we cannot define the variable here.\n\n11\n\nIf the docker file line starts with RUN then run the command. This command should be a rocker script because that is how rocker docker files are organized. See an example rocker docker file.\n\n12\n\nHere the input file for the while loop is specified.\n\n13\n\nThe rocker install_texlive.sh script (which is part of verse) will provide a basic texlive installation. Here a few more packages are added so that the user is able to run vanilla Quarto to PDF and Myst to PDF. See the chapter on texlive.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#start",
    "href": "developers.html#start",
    "title": "9  Developer notes",
    "section": "9.7 start",
    "text": "9.7 start\nWithin a JupyterHub, the user home directory $HOME is typically re-mapped to the user persistent home directory. That means that the image build process cannot put things into $HOME, they would just be lost when $HOME is re-mapped. If a process needs to have something in the home directory, e.g. in some local user configuration, this must be done in the start script. The repo2docker docker image specifies that the start script is ${REPO_DIR}/start. In py-rocket-base, the start scripts in a child docker file is souces in a subshell from the py-rocket-base start script.\n#!/bin/bash\nset -euo pipefail\n\n1# Start - Set any environment variables here\n# These are inherited by all processes, *except* RStudio\n# USE export &lt;parname&gt;=value\n# source this file to get the variables defined in the rocker Dockerfile\nsource ${REPO_DIR}/env.txt\n# End - Set any environment variables here\n\n# Run child start scripts in a subshell to contain its environment\n# ${REPO_DIR}/childstart/ is created by setup-start.sh\n2if [ -d \"${REPO_DIR}/childstart/\" ]; then\n    for script in ${REPO_DIR}/childstart/*; do\n        if [ -f \"$script\" ]; then\n            echo \"Sourcing script: $script\"\n            source \"$script\" || {\n                echo \"Error: Failed to source $script. Moving on to the next script.\"\n            }\n        fi\n    done\nfi\nexec \"$@\"\n\n1\n\nIn a Docker file so no way to dynamically set environmental variables, so the env.txt file with the export &lt;var&gt;=&lt;value&gt; are source at start up.\n\n2\n\nRun any child start script in a subshell. Run in a subshell to contain any set statements or similar. start scripts are moved into childstarts by the setup-start.sh pyrocket script.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#setup-desktop.sh",
    "href": "developers.html#setup-desktop.sh",
    "title": "9  Developer notes",
    "section": "9.8 setup-desktop.sh",
    "text": "9.8 setup-desktop.sh\nThe default for XDG and xfce4 is for Desktop files to be in ~/Desktop but this leads to a variety of problems. First we are altering the user directiory which seems rude, second orphan desktop files might be in ~/Desktop so who knows what the user Desktop experience with be, here the Desktop dir is set to /usr/share/Desktop so is part of the image. Users that really want to customize Desktop can change ~/.config/user-dirs.dirs. Though py-rocket-base might not respect that. Not sure why you’d do that instead of just using a different image that doesn’t have the py-rocket-base behavior.\n#!/bin/bash\nset -e\n\n# Copy in the Desktop files\n1APPLICATIONS_DIR=/usr/share/applications\n2DESKTOP_DIR=/usr/share/Desktop\nmkdir -p \"${DESKTOP_DIR}\"\nchown :staff /usr/share/Desktop\nchmod 775 /usr/share/Desktop\n# set the Desktop dir default for XDG\n3echo 'XDG_DESKTOP_DIR=\"${DESKTOP_DIR}\"' &gt; /etc/xdg/user-dirs.defaults\n\n# The for loops will fail if they return null (no files). Set shell option nullglob\nshopt -s nullglob\n\n4for desktop_file_path in ${REPO_DIR}/Desktop/*.desktop; do\n    cp \"${desktop_file_path}\" \"${APPLICATIONS_DIR}/.\"\n    # Symlink application to desktop and set execute permission so xfce (desktop) doesn't complain\n    desktop_file_name=\"$(basename ${desktop_file_path})\"\n    # Set execute permissions on the copied .desktop file\n    chmod +x \"${APPLICATIONS_DIR}/${desktop_file_name}\"\n    ln -sf \"${APPLICATIONS_DIR}/${desktop_file_name}\" \"${DESKTOP_DIR}/${desktop_file_name}\"\ndone\nupdate-desktop-database \"${APPLICATIONS_DIR}\"\n\n5# Add MIME Type data from XML files  to the MIME database.\nMIME_DIR=\"/usr/share/mime\"\nMIME_PACKAGES_DIR=\"${MIME_DIR}/packages\"\nmkdir -p \"${MIME_PACKAGES_DIR}\"\nfor mime_file_path in ${REPO_DIR}/Desktop/*.xml; do\n    cp \"${mime_file_path}\" \"${MIME_PACKAGES_DIR}/.\"\ndone\nupdate-mime-database \"${MIME_DIR}\"\n\n6# Add icons\nICON_DIR=\"/usr/share/icons\"\nICON_PACKAGES_DIR=\"${ICON_DIR}/packages\"\nmkdir -p \"${ICON_PACKAGES_DIR}\"\nfor icon_file_path in \"${REPO_DIR}\"/Desktop/*.png; do\n    cp \"${icon_file_path}\" \"${ICON_PACKAGES_DIR}/\" || echo \"Failed to copy ${icon_file_path}\"\ndone\nfor icon_file_path in \"${REPO_DIR}\"/Desktop/*.svg; do\n    cp \"${icon_file_path}\" \"${ICON_PACKAGES_DIR}/\" || echo \"Failed to copy ${icon_file_path}\"\ndone\ngtk-update-icon-cache \"${ICON_DIR}\"\n\n1\n\nThis is the default local for system applications.\n\n2\n\nCreate the Desktop directory and make sure jovyan can put files there. This is mainly for debugging.\n\n3\n\nThis is not needed. It is the user-dirs.dirs file that is used.\n\n4\n\nCopy the .desktop file in the Desktop directory into the applications directory and make a symlink to the Desktop directory. The former means that the applications will appear in the menu in xfce4 desktop and the latter means there will be a desktop icon.\n\n5\n\nAdd any mime xml files to the mime folder and update the mime database.\n\n6\n\nAdd any png or svg icon files to the icon folder and update the icon database.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#notes-on-the-jupyter-lab-environment",
    "href": "developers.html#notes-on-the-jupyter-lab-environment",
    "title": "9  Developer notes",
    "section": "9.9 Notes on the Jupyter Lab environment",
    "text": "9.9 Notes on the Jupyter Lab environment\n\n9.9.1 Terminal in Jupyter Lab\nWhen a terminal is launched from the Launcher, it starts a login bash shell (bash -l). When login bash shells are started, /etc/profile script is run. For this image, this script will execute all the scripts in the directory /etc/profile.d. There is the script init_conda.sh which ensures that the conda notebook environment is activated. The user might override this if they create ~/.bashrc_profile in which case that is used instead of /etc/profile.\nFor non-login bash shells (interactive), /etc/bash.bashrc determines the shell environment unless the user has created ~/.bashrc, in which case that file determines the shell environment. In Jupyter Lab, you can start and interactive shell by running bash (from a terminal). Be aware that if you run bash it might look like the conda environment is deactivated but it is really not since the PATH still includes conda in it. If you are trying to get remove conda from the path (and get rid of all the conda environment variables) you need to run conda deactivate (2x).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "developers.html#notes-on-r-in-the-rstudio-or-jupyter-lab-environment",
    "href": "developers.html#notes-on-r-in-the-rstudio-or-jupyter-lab-environment",
    "title": "9  Developer notes",
    "section": "9.10 Notes on R in the RStudio or Jupyter Lab environment",
    "text": "9.10 Notes on R in the RStudio or Jupyter Lab environment\njupyter-rsession-proxy in environment.yml allows us to launch RStudio from Jupyter Lab and IRkernel run in our R installation via this in the Docker file\nRUN Rscript -e \"install.packages('IRkernel')\" && \\\n    PATH=/srv/conda/envs/notebook/bin:$PATH Rscript -e \"IRkernel::installspec(name = 'ir', displayname = 'R ${R_VERSION}')\"\ncreates a Jupyter Lab kernel called R X.X.X using our R installation (in /usr/local/bin/R) with all our libraries.\nHowever we enter the R environment (either in Jupyter Lab or RStudio), the environment is different than the default environment if you use the default Python environment (the conda ‘notebook’ environment).\n\n9.10.1 Environmental variables\n\nPATH is different. conda is not on the path. Try Sys.getenv(\"PATH\"). This is on purpose because the R geospatial packages get confused if one uses the GDAL associated with the conda environment. This is critical to know if you are using reticulate and Python inside of R. conda will not be on the path and all the Python libraries will not be accessible. If you want to use the conda environment, you have to run this. The first line tells R where the conda binary is because it has no way to find it since conda is not on its system PATH.\n\noptions(reticulate.conda_binary = \"/srv/conda/condabin/conda\")\nreticulate::use_condaenv(\"/srv/conda/envs/notebook\", required = TRUE)\n\nFor RStudio only: None of the environmental variables in the docker file will be in the /rstudio environment. The start command affects \\lab and \\notebook but not \\rstudio. I have made some attempt to add back in a few required ones in /usr/local/lib/R/etc/Rprofile.site but it is very minimal.\n\nIf your users need some environmental variable set, they will need to set those in $R_HOME/etc/Rprofile.site which is run when R starts.\n\n\n9.10.2 Terminal in RStudio\nThe default way that a terminal is started is bash -l which means it is a login terminal. When a login terminal launches, /etc/profile script is run. For this image, this script will execute all the scripts in the directory /etc/profile.d. You can add scripts there that you want to run when a login terminal is started. In particular, there is the script init_conda.sh. This ensures that when a terminal is opened from the Launcher in JupyterLab, the conda notebook environment is activated. However, we do not want this to happen in RStudio so the script checks if RSTUDIO==1 and R_HOME is set, if that is true then we are in the RStudio UI and conda should not be initialized (and is not).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Developer notes</span>"
    ]
  },
  {
    "objectID": "related.html",
    "href": "related.html",
    "title": "10  Related Docker Stacks",
    "section": "",
    "text": "NASA Openscapes corn and NASA Openscapes py-rocket\nRocker R docker stack\nPangeo geosciences docker stack\nJupyter data science docker stack\ngeocompx\nb-data GPU accelerated docker images and devcontainers",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Related Docker Stacks</span>"
    ]
  }
]